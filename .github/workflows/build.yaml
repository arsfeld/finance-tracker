name: Build
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      matrix_target:
        required: true
        type: string
      matrix_goarch:
        required: true
        type: string
  workflow_run:
    workflows: ["Go Formatting"]
    types:
      - completed
    branches:
      - master
      - main
  push:
    tags:
      - 'v*'  # Trigger on version tags

jobs:
  build:
    name: Build Binary (${{ matrix.target }})
    runs-on: ubuntu-latest
    # Only run if the tests workflow completed successfully
    if: github.event.workflow_run.conclusion == 'success' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        target: ${{ inputs.matrix_target || '["linux/amd64", "linux/arm64"]' }}
        include:
          - target: linux/amd64
            goarch: amd64
          - target: linux/arm64
            goarch: arm64

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
      
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Get version information
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "GIT_COMMIT=" >> $GITHUB_OUTPUT
          else
            VERSION=${{ inputs.version || '$(git rev-parse --short HEAD)' }}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      - name: Configure Go for cross-compilation
        run: |
          mkdir -p .go
          cat > .go/config << EOF
          GOOS=linux
          GOARCH=${{ matrix.goarch }}
          CGO_ENABLED=0
          -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }} -X main.BuildTime=${{ steps.get_version.outputs.BUILD_TIME }} -X main.GitCommit=${{ steps.get_version.outputs.GIT_COMMIT }}"
          -trimpath
          EOF
      
      - name: Build release binary
        run: |
          cd src
          go build -o ../finance-tracker 
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: finance-tracker-${{ matrix.goarch }}-${{ steps.get_version.outputs.VERSION }}
          path: finance-tracker
          retention-days: 1 