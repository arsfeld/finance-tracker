name: Release
on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches:
      - master
      - main

env:
  RUST_TOOLCHAIN: stable
  TOOLCHAIN_PROFILE: minimal

jobs:
  build:
    name: Build Binary (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: finance-tracker-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/finance-tracker
          retention-days: 1

  tag-release:
    name: Create New Version Tag
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    permissions:
      contents: write  # Needed for creating tags

    outputs:
      new_tag: ${{ steps.get_latest_tag.outputs.version }}  # Make tag available to next job

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tags
      
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "version=v0.1.0" >> "$GITHUB_OUTPUT"
          else
            # Split version into parts
            major=$(echo "$latest_tag" | cut -d. -f1)
            minor=$(echo "$latest_tag" | cut -d. -f2)
            patch=$(echo "$latest_tag" | cut -d. -f3)
            
            # Increment patch version
            new_patch=$((patch + 1))
            new_version="${major}.${minor}.${new_patch}"
            
            echo "version=$new_version" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and push tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          new_tag="${{ steps.get_latest_tag.outputs.version }}"
          git tag "$new_tag"
          git push origin "$new_tag"
          echo "Created and pushed new tag: $new_tag"

  create-release:
    name: Create Release from Tag
    needs: [build, tag-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    permissions:
      contents: write

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      
      - name: Download x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: finance-tracker-x86_64-unknown-linux-gnu
          path: release-bins
      
      - name: Download aarch64 binary
        uses: actions/download-artifact@v4
        with:
          name: finance-tracker-aarch64-unknown-linux-gnu
          path: release-bins
      
      - name: Rename binaries with architecture suffix
        run: |
          mv release-bins/finance-tracker release-bins/finance-tracker-x86_64
          mv release-bins/finance-tracker release-bins/finance-tracker-aarch64
          chmod +x release-bins/finance-tracker-*
          ls -la release-bins/

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          new_tag="${{ needs.tag-release.outputs.new_tag }}"
          
          # Create a new release
          gh release create "$new_tag" \
            --title "$new_tag" \
            --generate-notes \
            "release-bins/finance-tracker-x86_64" \
            "release-bins/finance-tracker-aarch64" 