name: Release
on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - master
      - main
  push:
    tags:
      - 'v*'  # Trigger on version tags

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tag-release:
    name: Create New Version Tag
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event.workflow_run.conclusion == 'success'

    permissions:
      contents: write  # Needed for creating tags

    outputs:
      new_tag: ${{ steps.get_latest_tag.outputs.version }}  # Make tag available to next job

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tags
      
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "version=v0.1.0" >> "$GITHUB_OUTPUT"
          else
            # Split version into parts
            major=$(echo "$latest_tag" | cut -d. -f1)
            minor=$(echo "$latest_tag" | cut -d. -f2)
            patch=$(echo "$latest_tag" | cut -d. -f3)
            
            # Increment patch version
            new_patch=$((patch + 1))
            new_version="${major}.${minor}.${new_patch}"
            
            echo "version=$new_version" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and push tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          new_tag="${{ steps.get_latest_tag.outputs.version }}"
          git tag "$new_tag"
          git push origin "$new_tag"
          echo "Created and pushed new tag: $new_tag"

  build-release:
    name: Build Release
    needs: [tag-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Call Build Workflow
        uses: ./.github/workflows/build.yaml
        with:
          version: ${{ needs.tag-release.outputs.new_tag }}

  create-release:
    name: Create Release from Tag
    needs: [tag-release, build-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    permissions:
      contents: write

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      
      - name: Download x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: finance-tracker-amd64-${{ needs.tag-release.outputs.new_tag }}
          path: release-bins/x86_64
      
      - name: Download arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: finance-tracker-arm64-${{ needs.tag-release.outputs.new_tag }}
          path: release-bins/arm64
      
      - name: Prepare binaries
        run: |
          mkdir -p release-bins/final
          # Copy binaries to final location with architecture suffix
          cp release-bins/x86_64/finance-tracker-${{ needs.tag-release.outputs.new_tag }} release-bins/final/finance-tracker-linux-x86_64
          cp release-bins/arm64/finance-tracker-${{ needs.tag-release.outputs.new_tag }} release-bins/final/finance-tracker-linux-arm64
          chmod +x release-bins/final/finance-tracker-*
          # Check final binary sizes
          ls -la release-bins/final/

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          new_tag="${{ needs.tag-release.outputs.new_tag }}"
          
          # Create a new release
          gh release create "$new_tag" \
            --title "$new_tag" \
            --generate-notes \
            "release-bins/final/finance-tracker-linux-x86_64" \
            "release-bins/final/finance-tracker-linux-arm64" 

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [tag-release]
    permissions:
      contents: read
      packages: write

    steps:    
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache dockerfile
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/dockerfile') }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.tag-release.outputs.new_tag }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache