package handlers

import (
	"fmt"
	"net/http"
	"time"
)

// renderTransactionListHTML renders the transaction list as HTML for HTMX
func (h *APIHandlers) renderTransactionListHTML(w http.ResponseWriter, transactions []Transaction) {
	w.Header().Set("Content-Type", "text/html")
	
	html := `<div class="bg-white shadow overflow-hidden sm:rounded-md">
		<ul class="divide-y divide-gray-200">`
	
	if len(transactions) == 0 {
		html += `<li class="px-6 py-4 text-center text-gray-500">No transactions found</li>`
	} else {
		for _, txn := range transactions {
			amountClass := "text-red-600"
			amountSign := "-"
			if txn.Amount > 0 {
				amountClass = "text-green-600"
				amountSign = "+"
			}
			
			html += fmt.Sprintf(`
			<li class="px-6 py-4 hover:bg-gray-50 cursor-pointer" onclick="showTransactionDetail('%s')">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
								<span class="text-sm font-medium text-gray-600">%s</span>
							</div>
						</div>
						<div class="ml-4">
							<div class="text-sm font-medium text-gray-900">%s</div>
							<div class="text-sm text-gray-500">%s • %s</div>
						</div>
					</div>
					<div class="text-right">
						<div class="text-sm font-medium %s">%s$%.2f</div>
						<div class="text-sm text-gray-500">%s</div>
					</div>
				</div>
			</li>`,
				txn.ID,
				getTransactionIcon(txn.Category),
				txn.Description,
				txn.AccountName,
				txn.Category,
				amountClass,
				amountSign,
				abs(txn.Amount),
				formatDate(txn.Date),
			)
		}
	}
	
	html += `</ul></div>`
	
	// Add pagination controls if needed
	html += `<div class="mt-4 flex justify-between items-center">
		<button class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50" 
				hx-get="/api/v1/transactions?offset=0&limit=50" 
				hx-target="#transaction-list" 
				hx-swap="innerHTML">
			Previous
		</button>
		<span class="text-sm text-gray-700">Showing recent transactions</span>
		<button class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
				hx-get="/api/v1/transactions?offset=50&limit=50" 
				hx-target="#transaction-list" 
				hx-swap="innerHTML">
			Next
		</button>
	</div>`
	
	w.Write([]byte(html))
}

// renderRecentTransactionsHTML renders recent transactions for the dashboard
func (h *APIHandlers) renderRecentTransactionsHTML(w http.ResponseWriter, transactions []Transaction) {
	w.Header().Set("Content-Type", "text/html")
	
	if len(transactions) == 0 {
		w.Write([]byte(`<div class="px-4 py-5 sm:p-6 text-center text-gray-500">No recent transactions</div>`))
		return
	}
	
	html := `<ul class="divide-y divide-gray-200">`
	
	for _, txn := range transactions {
		amountClass := "text-red-600"
		amountSign := "-"
		if txn.Amount > 0 {
			amountClass = "text-green-600"
			amountSign = "+"
		}
		
		html += fmt.Sprintf(`
		<li class="px-4 py-4 hover:bg-gray-50">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<div class="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
							<span class="text-xs font-medium text-gray-600">%s</span>
						</div>
					</div>
					<div class="ml-3">
						<div class="text-sm font-medium text-gray-900">%s</div>
						<div class="text-xs text-gray-500">%s</div>
					</div>
				</div>
				<div class="text-right">
					<div class="text-sm font-medium %s">%s$%.2f</div>
					<div class="text-xs text-gray-500">%s</div>
				</div>
			</div>
		</li>`,
			getTransactionIcon(txn.Category),
			txn.Description,
			txn.AccountName,
			amountClass,
			amountSign,
			abs(txn.Amount),
			formatDateShort(txn.Date),
		)
	}
	
	html += `</ul>
	<div class="px-4 py-3 border-t border-gray-200">
		<a href="/transactions" class="text-sm font-medium text-indigo-600 hover:text-indigo-500">
			View all transactions →
		</a>
	</div>`
	
	w.Write([]byte(html))
}

// renderAccountListHTML renders the account list as HTML for HTMX
func (h *APIHandlers) renderAccountListHTML(w http.ResponseWriter, accounts []Account) {
	w.Header().Set("Content-Type", "text/html")
	
	html := `<div class="bg-white shadow overflow-hidden sm:rounded-md">
		<ul class="divide-y divide-gray-200">`
	
	if len(accounts) == 0 {
		html += `<li class="px-6 py-4 text-center text-gray-500">No accounts found</li>`
	} else {
		for _, acc := range accounts {
			balanceClass := "text-green-600"
			if acc.Balance < 0 {
				balanceClass = "text-red-600"
			}
			
			statusIcon := "🟢"
			statusText := "Active"
			if !acc.IsActive {
				statusIcon = "🔴"
				statusText = "Inactive"
			}
			
			html += fmt.Sprintf(`
			<li class="px-6 py-4 hover:bg-gray-50">
				<a href="/accounts/%s" class="block">
					<div class="flex items-center justify-between">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
									<span class="text-sm font-medium text-blue-600">%s</span>
								</div>
							</div>
							<div class="ml-4">
								<div class="text-sm font-medium text-gray-900">%s</div>
								<div class="text-sm text-gray-500">%s • %s %s</div>
							</div>
						</div>
						<div class="text-right">
							<div class="text-sm font-medium %s">$%.2f</div>
							<div class="text-sm text-gray-500">Last sync: %s</div>
						</div>
					</div>
				</a>
			</li>`,
				acc.ID,
				getAccountIcon(acc.Type),
				acc.Name,
				capitalizeFirst(acc.Type),
				statusIcon,
				statusText,
				balanceClass,
				acc.Balance,
				formatDateShort(acc.LastSyncDate),
			)
		}
	}
	
	html += `</ul></div>`
	
	w.Write([]byte(html))
}

// renderDashboardStatsHTML renders dashboard statistics as HTML
func (h *APIHandlers) renderDashboardStatsHTML(w http.ResponseWriter, stats DashboardStats) {
	w.Header().Set("Content-Type", "text/html")
	
	html := fmt.Sprintf(`
	<div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
		<!-- Total Balance -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
						</svg>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Total Balance</dt>
							<dd class="text-lg font-medium text-gray-900">$%.2f</dd>
						</dl>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Monthly Spending -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
						</svg>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Monthly Spending</dt>
							<dd class="text-lg font-medium text-gray-900">$%.2f</dd>
						</dl>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Transaction Count -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
						</svg>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Transactions</dt>
							<dd class="text-lg font-medium text-gray-900">%d</dd>
						</dl>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Account Count -->
		<div class="bg-white overflow-hidden shadow rounded-lg">
			<div class="p-5">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
						</svg>
					</div>
					<div class="ml-5 w-0 flex-1">
						<dl>
							<dt class="text-sm font-medium text-gray-500 truncate">Accounts</dt>
							<dd class="text-lg font-medium text-gray-900">%d</dd>
						</dl>
					</div>
				</div>
			</div>
		</div>
	</div>`,
		stats.TotalBalance,
		stats.MonthlySpending,
		stats.TransactionCount,
		stats.AccountCount,
	)
	
	w.Write([]byte(html))
}

// Helper functions
func getTransactionIcon(category string) string {
	switch category {
	case "Food & Drink":
		return "🍽️"
	case "Groceries":
		return "🛒"
	case "Transportation":
		return "🚗"
	case "Housing":
		return "🏠"
	case "Entertainment":
		return "🎬"
	case "Shopping":
		return "🛍️"
	case "Healthcare":
		return "⚕️"
	case "Travel":
		return "✈️"
	default:
		return "💳"
	}
}

func getAccountIcon(accountType string) string {
	switch accountType {
	case "checking":
		return "💰"
	case "savings":
		return "🏦"
	case "credit":
		return "💳"
	case "investment":
		return "📈"
	default:
		return "💼"
	}
}

func formatDate(t time.Time) string {
	return t.Format("Jan 2, 2006")
}

func formatDateShort(t time.Time) string {
	now := time.Now()
	if t.Year() == now.Year() && t.Month() == now.Month() && t.Day() == now.Day() {
		return "Today"
	} else if t.Year() == now.Year() && t.Month() == now.Month() && t.Day() == now.Day()-1 {
		return "Yesterday"
	} else if time.Since(t).Hours() < 24*7 {
		return t.Format("Mon")
	}
	return t.Format("Jan 2")
}

func capitalizeFirst(s string) string {
	if len(s) == 0 {
		return s
	}
	return string(s[0]-32) + s[1:]
}

func abs(x float64) float64 {
	if x < 0 {
		return -x
	}
	return x
}

func selected(current, value string) string {
	if current == value {
		return "selected"
	}
	return ""
}

// renderTransactionDetailHTML renders transaction detail modal content
func (h *APIHandlers) renderTransactionDetailHTML(w http.ResponseWriter, transaction Transaction) {
	w.Header().Set("Content-Type", "text/html")
	
	amountClass := "text-red-600"
	amountSign := "-"
	if transaction.Amount > 0 {
		amountClass = "text-green-600"
		amountSign = "+"
	}
	
	statusBadge := ""
	if transaction.Pending {
		statusBadge = `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">Pending</span>`
	} else {
		statusBadge = `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">Posted</span>`
	}
	
	// Set current category for select
	currentCategorySelected := ""
	switch transaction.Category {
	case "Food & Drink":
		currentCategorySelected = "Food & Drink"
	case "Groceries":
		currentCategorySelected = "Groceries"
	case "Transportation":
		currentCategorySelected = "Transportation"
	case "Housing":
		currentCategorySelected = "Housing"
	case "Entertainment":
		currentCategorySelected = "Entertainment"
	case "Shopping":
		currentCategorySelected = "Shopping"
	case "Healthcare":
		currentCategorySelected = "Healthcare"
	case "Travel":
		currentCategorySelected = "Travel"
	default:
		currentCategorySelected = transaction.Category
	}

	html := fmt.Sprintf(`
	<div class="space-y-6">
		<!-- Transaction Header -->
		<div class="flex items-center justify-between">
			<div class="flex items-center space-x-3">
				<div class="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
					<span class="text-lg">%s</span>
				</div>
				<div>
					<h4 class="text-lg font-medium text-gray-900">%s</h4>
					<p class="text-sm text-gray-500">%s</p>
				</div>
			</div>
			<div class="text-right">
				<div class="text-2xl font-bold %s">%s$%.2f</div>
				%s
			</div>
		</div>
		
		<!-- Transaction Details -->
		<div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
			<div>
				<dt class="text-sm font-medium text-gray-500">Date</dt>
				<dd class="mt-1 text-sm text-gray-900">%s</dd>
			</div>
			<div>
				<dt class="text-sm font-medium text-gray-500">Category</dt>
				<dd class="mt-1 text-sm text-gray-900">
					<div id="category-display-%s" x-data="{ editing: false }">
						<div x-show="!editing" class="flex items-center space-x-2">
							<span id="category-badge-%s" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
								%s %s
							</span>
							<button @click="editing = true" class="text-gray-400 hover:text-gray-600">
								<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
								</svg>
							</button>
						</div>
						<div x-show="editing" x-cloak>
							<form hx-put="/api/v1/transactions/%s/category" 
								  hx-target="#category-badge-%s"
								  hx-swap="outerHTML"
								  @htmx:after-swap="editing = false"
								  class="flex items-center space-x-2">
								<select name="category" class="text-sm border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
									<option value="Food & Drink" %s>🍽️ Food & Drink</option>
									<option value="Groceries" %s>🛒 Groceries</option>
									<option value="Transportation" %s>🚗 Transportation</option>
									<option value="Housing" %s>🏠 Housing</option>
									<option value="Entertainment" %s>🎬 Entertainment</option>
									<option value="Shopping" %s>🛍️ Shopping</option>
									<option value="Healthcare" %s>⚕️ Healthcare</option>
									<option value="Travel" %s>✈️ Travel</option>
									<option value="Education" %s>📚 Education</option>
									<option value="Personal" %s>👤 Personal</option>
									<option value="Bills & Utilities" %s>🏭 Bills & Utilities</option>
									<option value="Other" %s>💳 Other</option>
								</select>
								<button type="submit" class="text-green-600 hover:text-green-700">
									<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
									</svg>
								</button>
								<button type="button" @click="editing = false" class="text-red-600 hover:text-red-700">
									<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
									</svg>
								</button>
							</form>
						</div>
					</div>
				</dd>
			</div>
			<div>
				<dt class="text-sm font-medium text-gray-500">Account</dt>
				<dd class="mt-1 text-sm text-gray-900">%s</dd>
			</div>
			<div>
				<dt class="text-sm font-medium text-gray-500">Merchant</dt>
				<dd class="mt-1 text-sm text-gray-900">%s</dd>
			</div>
			<div class="sm:col-span-2">
				<dt class="text-sm font-medium text-gray-500">Description</dt>
				<dd class="mt-1 text-sm text-gray-900">%s</dd>
			</div>
			<div class="sm:col-span-2">
				<dt class="text-sm font-medium text-gray-500">Transaction ID</dt>
				<dd class="mt-1 text-sm text-gray-500 font-mono">%s</dd>
			</div>
		</div>
		
		<!-- Actions -->
		<div class="flex justify-between items-center pt-4 border-t border-gray-200">
			<div class="flex space-x-3">
				<button type="button" 
						onclick="document.querySelector('#category-display-%s [x-data]').__x.$data.editing = true"
						class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
					<svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
					</svg>
					Edit Category
				</button>
				<button type="button" 
						class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
					<svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
					</svg>
					Add Note
				</button>
			</div>
			<button type="button" 
					class="inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
				<svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
				</svg>
				Hide Transaction
			</button>
		</div>
	</div>`,
		getTransactionIcon(transaction.Category),
		transaction.Description,
		transaction.Merchant,
		amountClass,
		amountSign,
		abs(transaction.Amount),
		statusBadge,
		formatDate(transaction.Date),
		transaction.ID,
		transaction.ID,
		getTransactionIcon(transaction.Category),
		transaction.Category,
		transaction.ID,
		transaction.ID,
		selected(currentCategorySelected, "Food & Drink"),
		selected(currentCategorySelected, "Groceries"),
		selected(currentCategorySelected, "Transportation"),
		selected(currentCategorySelected, "Housing"),
		selected(currentCategorySelected, "Entertainment"),
		selected(currentCategorySelected, "Shopping"),
		selected(currentCategorySelected, "Healthcare"),
		selected(currentCategorySelected, "Travel"),
		selected(currentCategorySelected, "Education"),
		selected(currentCategorySelected, "Personal"),
		selected(currentCategorySelected, "Bills & Utilities"),
		selected(currentCategorySelected, "Other"),
		transaction.AccountName,
		transaction.Merchant,
		transaction.Description,
		transaction.ID,
		transaction.ID,
	)
	
	w.Write([]byte(html))
}